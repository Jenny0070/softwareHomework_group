<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd

        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        ">

   <context:component-scan base-package="com.steins.dao">
       <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
   </context:component-scan>

    <!--引入数据库的相关配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <context:property-placeholder location="classpath:log4j.properties"/>

    <!--引入数据库相关信息的配置文件-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClass" value="${jdbc.driver}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- c3p0连接池的私有属性 -->
        <property name="maxPoolSize" value="30" />
        <property name="minPoolSize" value="10" />
        <!-- 关闭连接后不自动commit -->
        <property name="autoCommitOnClose" value="false" />
        <!-- 获取连接超时时间 -->
        <property name="checkoutTimeout" value="10000" />
        <!-- 当获取连接失败重试次数 -->
        <property name="acquireRetryAttempts" value="2" />
    </bean>


<!--整合mybatis-->
    <!-- 3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml" />-->
        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                <!--可以加入驼峰命名,其他mybatis的配置也就是mybatis-config.xml都会转移到这里来-->
                <property name="mapUnderscoreToCamelCase" value="true"/>
                <!--<property name="logImpl" value="org.apache.ibatis.logging.slf4j.Slf4jImpl"/>-->

            </bean>
        </property>
        <!-- 扫描entity包 使用别名 -->
        <property name="typeAliasesPackage" value="com.steins.entity" />
        <!--插件配置-->
        <property name="plugins">
            <array>
                <!--分页插件的配置 拦截器实现分页功能-->
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            <!--指明用什么数据库-->
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
<!--持久层接口-->
    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean" />
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.steins.dao" />
    </bean>


    <!--事务管理-->
    <!--1-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--确定事务管理策略 transaction-manager指向上面的transactionManager-->
    <tx:advice transaction-manager="transactionManager" id="transactionAdvice" >
        <!--事务管理的相关值以及他的传播性-->
        <!--<tx:attributes>-->
            <!--&lt;!&ndash;查询相关配置为只读&ndash;&gt;-->
            <!--<tx:method name="select*" read-only="true"/>-->
            <!--<tx:method name="get*" read-only="true"/>-->
            <!--<tx:method name="query*" read-only="true"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED"-->
                       <!--rollback-for="Exception"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED"-->
                       <!--rollback-for="Exception"/>-->
            <!--<tx:method name="insert*" propagation="REQUIRED"-->
                       <!--rollback-for="Exception"/>-->
            <!--<tx:method name="add*" propagation="REQUIRED"-->
                       <!--rollback-for="Exception"/>-->
        <!--</tx:attributes>-->
    </tx:advice>
    <!--使用aop对事务管理的范围进行织入，明确：
    1 对哪些地方进行事务管理 excution书写，明确边界
    2 使用什么策略去管理

    策略我们使用了tx:advice全部书写于其中，在我们的aop的adviser中只需要引用这个事务管理者的建议即可
    -->
    <!--<aop:config>-->
        <!--<aop:pointcut id="txCut" expression="execution(* com.steins.service..*.*(..))"/>-->
        <!--<aop:advisor advice-ref="transactionAdvice" pointcut-ref="txCut"/>-->
    <!--</aop:config>-->
    <!--2-->
    <!--采用注解进行事务管理，在service的实现类上加上@Transanctional注解-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>